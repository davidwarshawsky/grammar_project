
expr: logical_or_expr;

logical_or_expr
    : logical_and_expr
    | left=logical_or_expr op=OP_LOGICAL_OR right=logical_and_expr   
    ;

logical_and_expr
    : comp_expr
    | left=logical_and_expr op=OP_LOGICAL_AND right=comp_expr
    ;


comp_expr
    : bitwise_or_expr
    | left=comp_expr op=OP_COMP right=bitwise_or_expr
    ;

bitwise_or_expr
    : bitwise_xor_expr
    | left=bitwise_or_expr op=OP_OR right=bitwise_xor_expr
    ;

bitwise_xor_expr
    : bitwise_and_expr
    | left=bitwise_xor_expr op=OP_XOR right=bitwise_and_expr
    ;

bitwise_and_expr
    : shift_expr
    | left=bitwise_and_expr op=OP_AND right=shift_expr
    ;

shift_expr
    : add_sub_expr
    | left=shift_expr op=OP_SHIFT right=add_sub_expr
    ;

add_sub_expr
    : mdfm_expr
    | left=add_sub_expr op=OP_SUB right=mdfm_expr 
    | left=add_sub_expr op=OP_ADD right=mdfm_expr
    ;

// mdfm_expr
//     : exp_expr
//     | left=mdfm_expr op=OP_MUL right=exp_expr
//     | left=mdfm_expr op=OP_DIV right=exp_expr
//     | left=mdfm_expr op=OP_FLOOR_DIV right=exp_expr
//     | left=mdfm_expr op=OP_MOD right=exp_expr
//     ;

// exp_expr
//     : left=data_structures op=OP_EXP right=exp_expr
//     | data_structures
//     ;


// logical_not_expr
//     : op=OP_LOGICAL_NOT right=comp_expr
//     | comp_expr
//     ;


def visitProg(self, ctx: OpsParser.ProgContext):
        return self.visit(ctx.expr())

    def visitLogical_or_expr(self, ctx: OpsParser.Logical_or_exprContext):
        left_recurse_validate_op(self,ctx, OpsLexer,self.stack)
        return self.visitChildren(ctx)

    def visitLogical_and_expr(self, ctx: OpsParser.Logical_and_exprContext):
        left_recurse_validate_op(self,ctx, OpsLexer,self.stack)
        return self.visitChildren(ctx)

    def visitComp_expr(self, ctx: OpsParser.Comp_exprContext):
        left_recurse_validate_op(self,ctx, OpsLexer,self.stack)
        return self.visitChildren(ctx)

    def visitBitwise_or_expr(self, ctx: OpsParser.Bitwise_or_exprContext):
        left_recurse_validate_op(self,ctx, OpsLexer,self.stack)
        return self.visitChildren(ctx)

    def visitBitwise_xor_expr(self, ctx: OpsParser.Bitwise_xor_exprContext):
        left_recurse_validate_op(self,ctx, OpsLexer,self.stack)
        return self.visitChildren(ctx)

    def visitBitwise_and_expr(self, ctx: OpsParser.Bitwise_and_exprContext):
        left_recurse_validate_op(self,ctx, OpsLexer,self.stack)
        return self.visitChildren(ctx)

    def visitShift_expr(self, ctx: OpsParser.Shift_exprContext):
        left_recurse_validate_op(self,ctx, OpsLexer,self.stack)
        return self.visitChildren(ctx)

    def visitAdd_sub_expr(self, ctx: OpsParser.Add_sub_exprContext):
        left_recurse_validate_op(self,ctx, OpsLexer,self.stack)
        return self.visitChildren(ctx)

    def visitMdfm_expr(self, ctx: OpsParser.Mdfm_exprContext):
        left_recurse_validate_op(self,ctx, OpsLexer,self.stack)
        return self.visitChildren(ctx)

    def visitExp_expr(self, ctx: OpsParser.Exp_exprContext):
        print("Visited Exp_expr")
        right_recurse_validate_op(self,ctx, OpsLexer,self.stack)
        return self.visitChildren(ctx)


